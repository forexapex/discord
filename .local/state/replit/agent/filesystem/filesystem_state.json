{"file_contents":{"commands/admin/setup-ticket.js":{"content":"const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, PermissionFlagsBits } = require('discord.js');\n\nmodule.exports = {\n  data: new SlashCommandBuilder()\n    .setName('setup-ticket')\n    .setDescription('Set up the support ticket panel')\n    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),\n  async execute(interaction, client) {\n    const embed = new EmbedBuilder()\n      .setColor('#5865F2')\n      .setTitle('🎟️ Support Tickets')\n      .setDescription(\n        'Please choose the option that best matches your issue from the menu below.\\n' +\n        'Once you select,\\n' +\n        '✅ A private ticket channel will be created where our team can assist you.\\n\\n' +\n        '✨ **How it works:**\\n' +\n        '• Pick a category from the menu ⬇️\\n' +\n        '• A new ticket will open 📂\\n' +\n        '• Our staff will reply as soon as possible ⏳'\n      )\n      .setFooter({ text: 'SG ESPORTS' })\n      .setTimestamp();\n\n    const selectMenu = new StringSelectMenuBuilder()\n      .setCustomId('ticket_select')\n      .setPlaceholder('Select the option that best fits your problem')\n      .addOptions(\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Billing Support')\n          .setDescription('Payment and billing issues')\n          .setValue('billing')\n          .setEmoji('💵'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Account Issues')\n          .setDescription('Problems with your account')\n          .setValue('account')\n          .setEmoji('📧'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('General Support')\n          .setDescription('General questions and support')\n          .setValue('general')\n          .setEmoji('🔧'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Report')\n          .setDescription('Report users or issues')\n          .setValue('report')\n          .setEmoji('⚠️')\n      );\n\n    const row = new ActionRowBuilder().addComponents(selectMenu);\n\n    await interaction.reply({ content: '✅ Ticket panel created!', ephemeral: true });\n    await interaction.channel.send({ embeds: [embed], components: [row] });\n  },\n};\n","size_bytes":2234},"commands/admin/stats.js":{"content":"const { SlashCommandBuilder, EmbedBuilder, PermissionFlagsBits } = require('discord.js');\nconst fs = require('fs');\n\nmodule.exports = {\n  data: new SlashCommandBuilder()\n    .setName('stats')\n    .setDescription('View support ticket statistics')\n    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),\n  async execute(interaction, client) {\n    const stats = JSON.parse(fs.readFileSync('./data/stats.json', 'utf8'));\n    const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n\n    const openTickets = Object.keys(ticketData).length;\n    const totalTickets = stats.totalTickets || 0;\n    const totalClosed = stats.totalClosed || 0;\n    const totalRatings = stats.ratings ? stats.ratings.length : 0;\n    const averageRating = totalRatings > 0 \n      ? (stats.ratings.reduce((sum, r) => sum + r.rating, 0) / totalRatings).toFixed(2)\n      : 'N/A';\n\n    const ratingDistribution = {\n      1: stats.ratings ? stats.ratings.filter(r => r.rating === 1).length : 0,\n      2: stats.ratings ? stats.ratings.filter(r => r.rating === 2).length : 0,\n      3: stats.ratings ? stats.ratings.filter(r => r.rating === 3).length : 0,\n      4: stats.ratings ? stats.ratings.filter(r => r.rating === 4).length : 0,\n      5: stats.ratings ? stats.ratings.filter(r => r.rating === 5).length : 0,\n    };\n\n    const ticketsByType = stats.ticketsByType || {};\n    const typeBreakdown = Object.entries(ticketsByType)\n      .map(([type, count]) => `${type}: ${count}`)\n      .join('\\n') || 'No data yet';\n\n    const embed = new EmbedBuilder()\n      .setColor('#00FF00')\n      .setTitle('📊 Support Statistics')\n      .addFields(\n        { name: '🎫 Total Tickets Created', value: totalTickets.toString(), inline: true },\n        { name: '🔒 Total Tickets Closed', value: totalClosed.toString(), inline: true },\n        { name: '📂 Currently Open', value: openTickets.toString(), inline: true },\n        { name: '\\u200B', value: '\\u200B' },\n        { name: '📋 Tickets by Type', value: typeBreakdown, inline: true },\n        { name: '\\u200B', value: '\\u200B', inline: true },\n        { name: '\\u200B', value: '\\u200B', inline: true },\n        { name: '📈 Total Ratings Received', value: totalRatings.toString(), inline: true },\n        { name: '⭐ Average Rating', value: averageRating.toString(), inline: true },\n        { name: '\\u200B', value: '\\u200B', inline: true },\n        { name: '📊 Rating Distribution', value: \n          `⭐ (1): ${ratingDistribution[1]}\\n` +\n          `⭐⭐ (2): ${ratingDistribution[2]}\\n` +\n          `⭐⭐⭐ (3): ${ratingDistribution[3]}\\n` +\n          `⭐⭐⭐⭐ (4): ${ratingDistribution[4]}\\n` +\n          `⭐⭐⭐⭐⭐ (5): ${ratingDistribution[5]}`\n        }\n      )\n      .setFooter({ text: 'SG ESPORTS Support System' })\n      .setTimestamp();\n\n    await interaction.reply({ embeds: [embed] });\n  },\n};\n","size_bytes":2879},"commands/ticket/remove.js":{"content":"const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');\nconst fs = require('fs');\n\nmodule.exports = {\n  data: new SlashCommandBuilder()\n    .setName('remove')\n    .setDescription('Remove a user from the ticket')\n    .addUserOption(option =>\n      option.setName('user')\n        .setDescription('The user to remove')\n        .setRequired(true))\n    .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),\n  async execute(interaction, client) {\n    const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n    \n    if (!ticketData[interaction.channel.id]) {\n      return interaction.reply({ content: '❌ This command can only be used in ticket channels!', ephemeral: true });\n    }\n\n    const user = interaction.options.getUser('user');\n    \n    await interaction.channel.permissionOverwrites.delete(user);\n\n    await interaction.reply({ content: `✅ Removed <@${user.id}> from this ticket.` });\n  },\n};\n","size_bytes":956},"deploy-commands.js":{"content":"const { REST, Routes } = require('discord.js');\nconst fs = require('fs');\n\nlet config;\ntry {\n  config = require('./config.js');\n} catch (error) {\n  console.error('❌ Configuration error!');\n  console.error('Please create config.json from config.example.json');\n  console.error('OR set environment variables (DISCORD_TOKEN, CLIENT_ID, GUILD_ID, etc.)');\n  console.error('\\n📖 See SETUP_GUIDE.md for detailed instructions!\\n');\n  process.exit(1);\n}\n\nconst commands = [];\nconst commandFolders = fs.readdirSync('./commands');\n\nfor (const folder of commandFolders) {\n  const commandFiles = fs.readdirSync(`./commands/${folder}`).filter(file => file.endsWith('.js'));\n  for (const file of commandFiles) {\n    const command = require(`./commands/${folder}/${file}`);\n    commands.push(command.data.toJSON());\n  }\n}\n\nconst rest = new REST({ version: '10' }).setToken(config.token);\n\n(async () => {\n  try {\n    console.log(`🔄 Started refreshing ${commands.length} application (/) commands.`);\n\n    const data = await rest.put(\n      Routes.applicationGuildCommands(config.clientId, config.guildId),\n      { body: commands },\n    );\n\n    console.log(`✅ Successfully reloaded ${data.length} application (/) commands.`);\n  } catch (error) {\n    console.error(error);\n  }\n})();\n","size_bytes":1273},"README.md":{"content":"# SG ESPORTS Discord Bot\n\nA comprehensive Discord bot for managing support tickets, reaction roles, and game role assignments.\n\n## Features\n\n### 🚀 Auto-Setup on Startup\n- **Automatic Panel Deployment**: Ticket and game role panels are automatically posted to their designated channels when the bot starts\n- **Smart Cleanup**: Old bot messages are automatically removed before posting new panels\n- **Ticket Restoration**: Open tickets are automatically restored and validated when the bot comes back online\n- **Zero Manual Setup**: Just configure channel IDs and start the bot - panels appear automatically!\n\n### 🎟️ Support Ticket System\n- **Dropdown Select Menu**: Users can choose from multiple support categories\n  - 💵 Billing Support\n  - 📧 Account Issues\n  - 🔧 General Support\n  - ⚠️ Report\n- **Private Ticket Channels**: Automatically creates private channels for support\n- **Ticket Claiming**: Support staff can claim tickets for professional handling\n- **HTML Transcripts**: Beautiful HTML-formatted transcripts sent to:\n  - User via DM when ticket closes\n  - Designated transcript channel in server\n  - Also saved locally as text backup\n- **User Feedback**: Collects ratings (1-5 stars) after ticket closure\n- **Statistics**: View support performance metrics\n\n### 🎮 Game Role System\n- **Dropdown Menu**: Multi-select game roles\n- **Available Games**:\n  - 🔥 VALORANT\n  - 🎯 Battleground Mobile India\n  - 💣 Counter Strike: Global Offensive\n  - 🎖️ Call Of Duty: Modern Warfare\n  - 🏆 Apex Legends\n  - 🎭 Rainbow Six Siege\n  - ⚔️ League Of Legends\n- **Auto Role Assignment**: Automatically assigns/removes roles based on selection\n\n### 🛠️ Admin Commands\n- `/setup-ticket` - Create the support ticket panel\n- `/setup-gameroles` - Create the game role selection panel\n- `/stats` - View support ticket statistics\n- `/add` - Add a user to a ticket\n- `/remove` - Remove a user from a ticket\n\n## Setup Instructions\n\n### 1. Create a Discord Bot\n\n1. Go to [Discord Developer Portal](https://discord.com/developers/applications)\n2. Click \"New Application\"\n3. Give your bot a name (e.g., \"SG ESPORTS Bot\")\n4. Go to the \"Bot\" tab\n5. Click \"Add Bot\"\n6. Enable these **Privileged Gateway Intents**:\n   - ✅ PRESENCE INTENT\n   - ✅ SERVER MEMBERS INTENT\n   - ✅ MESSAGE CONTENT INTENT\n7. Copy your bot token (you'll need this later)\n\n### 2. Invite the Bot to Your Server\n\n1. Go to the \"OAuth2\" > \"URL Generator\" tab\n2. Select scopes:\n   - ✅ `bot`\n   - ✅ `applications.commands`\n3. Select bot permissions:\n   - ✅ Administrator (or specific permissions: Manage Channels, Manage Roles, Send Messages, etc.)\n4. Copy the generated URL and open it in your browser\n5. Select your server and authorize\n\n### 3. Configure the Bot\n\n1. Copy `config.example.json` to `config.json`:\n   ```bash\n   cp config.example.json config.json\n   ```\n\n2. Edit `config.json` with your details:\n   ```json\n   {\n     \"token\": \"YOUR_BOT_TOKEN\",\n     \"clientId\": \"YOUR_BOT_CLIENT_ID\",\n     \"guildId\": \"YOUR_SERVER_ID\",\n     \"ticketCategoryId\": \"CATEGORY_ID_FOR_TICKETS\",\n     \"logChannelId\": \"CHANNEL_ID_FOR_LOGS\",\n     \"transcriptChannelId\": \"CHANNEL_ID_FOR_TRANSCRIPTS\",\n     \"supportRoleId\": \"ROLE_ID_FOR_SUPPORT_TEAM\",\n     \"adminRoleId\": \"ROLE_ID_FOR_ADMINS\",\n     \"ticketChannelId\": \"CHANNEL_FOR_TICKET_PANEL\",\n     \"reactionRoleChannelId\": \"CHANNEL_FOR_GAME_ROLES\"\n   }\n   ```\n\n### How to Get IDs in Discord:\n\n1. Enable Developer Mode: Settings > Advanced > Developer Mode\n2. Right-click on any server/channel/role/user and click \"Copy ID\"\n\n### 4. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 5. Deploy Slash Commands\n\n```bash\nnode deploy-commands.js\n```\n\n### 6. Start the Bot\n\n```bash\nnode index.js\n```\n\n**That's it!** The bot will automatically:\n- ✅ Post the ticket panel to your ticket channel\n- ✅ Post the game roles panel to your game roles channel\n- ✅ Clean up any old bot messages\n- ✅ Restore any open tickets\n\nNo manual setup commands needed!\n\n## Usage\n\n### Auto-Setup (Recommended)\n\nThe bot automatically sets up panels on startup! Just make sure you have:\n- `ticketChannelId` set in config.json\n- `reactionRoleChannelId` set in config.json\n\nWhen the bot starts, it will:\n1. Clean old bot messages from those channels\n2. Post fresh panels automatically\n3. Restore any open tickets\n\n### Manual Setup (Optional)\n\nYou can also manually create panels anywhere using slash commands:\n\n**For Ticket Panel:**\n1. Go to any channel\n2. Run `/setup-ticket`\n3. The bot will create an embed with a dropdown menu\n\n**For Game Roles:**\n1. Go to any channel\n2. Run `/setup-gameroles`\n3. The bot will create an embed with a dropdown menu for game selection\n\n### Managing Tickets\n\n- **Users**: Select a category from the dropdown to create a ticket\n- **Support Staff**: \n  - Click \"Claim Ticket\" to claim a ticket\n  - Click \"Close Ticket\" to close and get user feedback\n  - Use `/add @user` to add someone to a ticket\n  - Use `/remove @user` to remove someone from a ticket\n\n### Viewing Statistics\n\n- Run `/stats` to see:\n  - Open tickets count\n  - Total ratings received\n  - Average rating\n  - Rating distribution\n\n## File Structure\n\n```\n.\n├── commands/\n│   ├── admin/          # Admin commands\n│   └── ticket/         # Ticket management commands\n├── events/             # Event handlers\n├── utils/             # Utility functions\n│   └── transcriptGenerator.js  # HTML transcript generator\n├── data/              # Data storage\n│   ├── tickets.json   # Active tickets\n│   ├── stats.json     # Statistics\n│   └── transcripts/   # Saved transcripts (HTML & TXT)\n├── index.js           # Main bot file\n├── deploy-commands.js # Command deployment\n└── config.json        # Configuration\n```\n\n## 🌐 AWS Deployment Guide\n\n### Deploy on AWS EC2 (Amazon Linux 2 / Ubuntu)\n\n#### Prerequisites\n- AWS EC2 instance (t2.micro or larger)\n- Security group with SSH (port 22) access\n- SSH key pair for accessing your instance\n\n#### Step 1: Connect to Your EC2 Instance\n\n```bash\nssh -i your-key.pem ec2-user@your-instance-ip  # For Amazon Linux\n# OR\nssh -i your-key.pem ubuntu@your-instance-ip     # For Ubuntu\n```\n\n#### Step 2: Install Node.js\n\n**For Amazon Linux 2:**\n```bash\n# Update system\nsudo yum update -y\n\n# Install Node.js 20.x\ncurl -fsSL https://rpm.nodesource.com/setup_20.x | sudo bash -\nsudo yum install -y nodejs\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n**For Ubuntu:**\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install Node.js 20.x\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n#### Step 3: Install Git\n\n**Amazon Linux:**\n```bash\nsudo yum install git -y\n```\n\n**Ubuntu:**\n```bash\nsudo apt install git -y\n```\n\n#### Step 4: Clone or Upload Your Bot\n\n**Option A: Upload files using SCP**\n```bash\n# From your local machine\nscp -i your-key.pem -r /path/to/bot ec2-user@your-instance-ip:~/sg-bot\n```\n\n**Option B: Clone from repository (if you have one)**\n```bash\ngit clone your-repository-url sg-bot\ncd sg-bot\n```\n\n**Option C: Create manually**\n```bash\nmkdir sg-bot\ncd sg-bot\n# Then upload files individually\n```\n\n#### Step 5: Install Dependencies\n\n```bash\ncd sg-bot\nnpm install\n```\n\n#### Step 6: Configure the Bot\n\n```bash\n# Copy example config\ncp config.example.json config.json\n\n# Edit configuration\nnano config.json\n# OR\nvi config.json\n```\n\nAdd your Discord bot credentials and IDs, then save (Ctrl+X, Y, Enter for nano).\n\n#### Step 7: Deploy Commands\n\n```bash\nnode deploy-commands.js\n```\n\n#### Step 8: Run Bot with PM2 (Process Manager)\n\nPM2 keeps your bot running even after you disconnect from SSH.\n\n```bash\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Start bot with PM2\npm2 start index.js --name \"sg-esports-bot\"\n\n# Save PM2 configuration\npm2 save\n\n# Set PM2 to start on system boot\npm2 startup\n# Follow the command it outputs\n\n# View bot status\npm2 status\n\n# View logs\npm2 logs sg-esports-bot\n\n# Restart bot\npm2 restart sg-esports-bot\n\n# Stop bot\npm2 stop sg-esports-bot\n```\n\n#### Step 9: Configure Firewall (Optional but Recommended)\n\n**Amazon Linux:**\n```bash\n# Firewall is usually managed through AWS Security Groups\n# No additional configuration needed\n```\n\n**Ubuntu with UFW:**\n```bash\nsudo ufw allow 22/tcp     # SSH\nsudo ufw enable\nsudo ufw status\n```\n\n#### Useful PM2 Commands\n\n```bash\npm2 list                    # List all processes\npm2 logs                    # View all logs\npm2 logs sg-esports-bot     # View specific bot logs\npm2 restart sg-esports-bot  # Restart bot\npm2 stop sg-esports-bot     # Stop bot\npm2 delete sg-esports-bot   # Remove from PM2\npm2 monit                   # Monitor in real-time\n```\n\n#### Updating Your Bot\n\n```bash\n# Navigate to bot directory\ncd ~/sg-bot\n\n# Pull latest changes (if using git)\ngit pull\n\n# Or upload new files via SCP\n\n# Install any new dependencies\nnpm install\n\n# Deploy new commands if you added any\nnode deploy-commands.js\n\n# Restart the bot\npm2 restart sg-esports-bot\n```\n\n#### Troubleshooting on AWS\n\n**Bot not starting:**\n```bash\n# Check logs\npm2 logs sg-esports-bot\n\n# Check if Node.js is installed\nnode --version\n\n# Check if dependencies are installed\nnpm list\n```\n\n**Can't connect to EC2:**\n- Verify security group allows SSH (port 22)\n- Check if you're using the correct key file\n- Ensure instance is running in AWS Console\n\n**Bot crashes:**\n```bash\n# View error logs\npm2 logs sg-esports-bot --err\n\n# Restart bot\npm2 restart sg-esports-bot\n```\n\n### Environment Variables (Alternative to config.json)\n\nFor better security on AWS, use environment variables:\n\n```bash\n# Create .env file\nnano .env\n```\n\nAdd your configuration:\n```env\nDISCORD_TOKEN=your_bot_token\nCLIENT_ID=your_client_id\nGUILD_ID=your_server_id\nTICKET_CATEGORY_ID=category_id\nLOG_CHANNEL_ID=log_channel_id\nTRANSCRIPT_CHANNEL_ID=transcript_channel_id\nSUPPORT_ROLE_ID=support_role_id\nADMIN_ROLE_ID=admin_role_id\nTICKET_CHANNEL_ID=ticket_channel_id\nREACTION_ROLE_CHANNEL_ID=reaction_role_channel_id\n```\n\nInstall dotenv:\n```bash\nnpm install dotenv\n```\n\nThe bot already supports environment variables through `config.js`.\n\n## Support\n\nFor issues or questions about this bot, please contact the SG ESPORTS team.\n\n## Credits\n\nCreated for **SG ESPORTS** 🎮\n","size_bytes":10350},"config.js":{"content":"const fs = require('fs');\n\nfunction loadConfig() {\n  if (process.env.DISCORD_TOKEN) {\n    return {\n      token: process.env.DISCORD_TOKEN,\n      clientId: process.env.CLIENT_ID || '',\n      guildId: process.env.GUILD_ID || '',\n      ticketCategoryId: process.env.TICKET_CATEGORY_ID || '',\n      logChannelId: process.env.LOG_CHANNEL_ID || '',\n      supportRoleId: process.env.SUPPORT_ROLE_ID || '',\n      adminRoleId: process.env.ADMIN_ROLE_ID || '',\n      ticketChannelId: process.env.TICKET_CHANNEL_ID || '',\n      reactionRoleChannelId: process.env.REACTION_ROLE_CHANNEL_ID || ''\n    };\n  }\n\n  if (fs.existsSync('./config.json')) {\n    return JSON.parse(fs.readFileSync('./config.json', 'utf8'));\n  }\n\n  throw new Error('No configuration found! Please create config.json or set environment variables.');\n}\n\nmodule.exports = loadConfig();\n","size_bytes":841},"events/ready.js":{"content":"const { setupTicketPanel, setupGameRolesPanel, cleanOldBotMessages } = require('../utils/panelSetup');\nconst fs = require('fs');\n\nmodule.exports = {\n  name: 'ready',\n  once: true,\n  async execute(client) {\n    console.log(`✅ Bot is online as ${client.user.tag}`);\n    console.log(`🎮 Serving ${client.guilds.cache.size} server(s)`);\n    client.user.setActivity('SG ESPORTS Support', { type: 'WATCHING' });\n\n    const guild = client.guilds.cache.get(client.config.guildId);\n    if (!guild) {\n      console.log('⚠️  Could not find guild');\n      return;\n    }\n\n    if (client.config.ticketChannelId) {\n      const ticketChannel = guild.channels.cache.get(client.config.ticketChannelId);\n      if (ticketChannel) {\n        console.log('🎫 Setting up ticket panel...');\n        await cleanOldBotMessages(ticketChannel, client.user.id);\n        await setupTicketPanel(ticketChannel);\n        console.log('✅ Ticket panel created in', ticketChannel.name);\n      } else {\n        console.log('⚠️  Ticket channel not found');\n      }\n    }\n\n    if (client.config.reactionRoleChannelId) {\n      const gameRoleChannel = guild.channels.cache.get(client.config.reactionRoleChannelId);\n      if (gameRoleChannel) {\n        console.log('🎮 Setting up game roles panel...');\n        await cleanOldBotMessages(gameRoleChannel, client.user.id);\n        await setupGameRolesPanel(gameRoleChannel);\n        console.log('✅ Game roles panel created in', gameRoleChannel.name);\n      } else {\n        console.log('⚠️  Game role channel not found');\n      }\n    }\n\n    const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n    const ticketChannels = Object.keys(ticketData);\n    \n    if (ticketChannels.length > 0) {\n      console.log(`🔄 Restoring ${ticketChannels.length} open ticket(s)...`);\n      \n      for (const channelId of ticketChannels) {\n        const channel = guild.channels.cache.get(channelId);\n        \n        if (!channel) {\n          console.log(`⚠️  Ticket channel ${channelId} not found, removing from data...`);\n          delete ticketData[channelId];\n          continue;\n        }\n\n        const ticket = ticketData[channelId];\n        console.log(`✅ Restored ticket: ${channel.name} (User: ${ticket.userId})`);\n      }\n\n      fs.writeFileSync('./data/tickets.json', JSON.stringify(ticketData, null, 2));\n      console.log(`✅ All tickets restored and validated`);\n    } else {\n      console.log('📭 No open tickets to restore');\n    }\n\n    console.log('🚀 Bot fully initialized and ready!');\n  },\n};\n","size_bytes":2563},"commands/ticket/add.js":{"content":"const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');\nconst fs = require('fs');\n\nmodule.exports = {\n  data: new SlashCommandBuilder()\n    .setName('add')\n    .setDescription('Add a user to the ticket')\n    .addUserOption(option =>\n      option.setName('user')\n        .setDescription('The user to add')\n        .setRequired(true))\n    .setDefaultMemberPermissions(PermissionFlagsBits.ManageChannels),\n  async execute(interaction, client) {\n    const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n    \n    if (!ticketData[interaction.channel.id]) {\n      return interaction.reply({ content: '❌ This command can only be used in ticket channels!', ephemeral: true });\n    }\n\n    const user = interaction.options.getUser('user');\n    \n    await interaction.channel.permissionOverwrites.create(user, {\n      ViewChannel: true,\n      SendMessages: true,\n      ReadMessageHistory: true\n    });\n\n    await interaction.reply({ content: `✅ Added <@${user.id}> to this ticket.` });\n  },\n};\n","size_bytes":1032},"events/messageCreate.js":{"content":"const fs = require('fs');\n\nmodule.exports = {\n  name: 'messageCreate',\n  async execute(message, client) {\n    if (message.author.bot) return;\n\n    const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n    \n    if (ticketData[message.channel.id]) {\n      if (!ticketData[message.channel.id].messages) {\n        ticketData[message.channel.id].messages = [];\n      }\n      \n      ticketData[message.channel.id].messages.push({\n        author: message.author.tag,\n        content: message.content,\n        timestamp: Date.now()\n      });\n      \n      fs.writeFileSync('./data/tickets.json', JSON.stringify(ticketData, null, 2));\n    }\n  },\n};\n","size_bytes":664},"index.js":{"content":"const { Client, GatewayIntentBits, Partials, Collection } = require('discord.js');\nconst fs = require('fs');\nconst path = require('path');\n\nconst client = new Client({\n  intents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.GuildMessageReactions,\n    GatewayIntentBits.GuildMembers,\n    GatewayIntentBits.MessageContent,\n  ],\n  partials: [Partials.Message, Partials.Channel, Partials.Reaction],\n});\n\nclient.commands = new Collection();\nclient.tickets = new Map();\n\nlet config;\ntry {\n  config = require('./config.js');\n  client.config = config;\n} catch (error) {\n  console.error('❌ Configuration error!');\n  console.error('Please create config.json from config.example.json');\n  console.error('OR set environment variables (DISCORD_TOKEN, CLIENT_ID, GUILD_ID, etc.)');\n  console.error('\\n📖 See SETUP_GUIDE.md for detailed instructions!\\n');\n  process.exit(1);\n}\n\nif (!fs.existsSync('./data')) {\n  fs.mkdirSync('./data');\n}\n\nif (!fs.existsSync('./data/tickets.json')) {\n  fs.writeFileSync('./data/tickets.json', JSON.stringify({}));\n}\n\nif (!fs.existsSync('./data/transcripts')) {\n  fs.mkdirSync('./data/transcripts');\n}\n\nif (!fs.existsSync('./data/stats.json')) {\n  fs.writeFileSync('./data/stats.json', JSON.stringify({ totalTickets: 0, ratings: [] }));\n}\n\nconst commandFolders = fs.readdirSync('./commands');\nfor (const folder of commandFolders) {\n  const commandFiles = fs.readdirSync(`./commands/${folder}`).filter(file => file.endsWith('.js'));\n  for (const file of commandFiles) {\n    const command = require(`./commands/${folder}/${file}`);\n    client.commands.set(command.data.name, command);\n  }\n}\n\nconst eventFiles = fs.readdirSync('./events').filter(file => file.endsWith('.js'));\nfor (const file of eventFiles) {\n  const event = require(`./events/${file}`);\n  if (event.once) {\n    client.once(event.name, (...args) => event.execute(...args, client));\n  } else {\n    client.on(event.name, (...args) => event.execute(...args, client));\n  }\n}\n\nclient.login(config.token).catch(err => {\n  console.error('❌ Failed to login! Please check your bot token in config.json');\n  console.error(err.message);\n  process.exit(1);\n});\n","size_bytes":2182},"utils/panelSetup.js":{"content":"const { EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder } = require('discord.js');\n\nasync function setupTicketPanel(channel) {\n  const embed = new EmbedBuilder()\n    .setColor('#5865F2')\n    .setTitle('🎟️ Support Tickets')\n    .setDescription(\n      'Please choose the option that best matches your issue from the menu below.\\n' +\n      'Once you select,\\n' +\n      '✅ A private ticket channel will be created where our team can assist you.\\n\\n' +\n      '✨ **How it works:**\\n' +\n      '• Pick a category from the menu ⬇️\\n' +\n      '• A new ticket will open 📂\\n' +\n      '• Our staff will reply as soon as possible ⏳'\n    )\n    .setFooter({ text: 'SG ESPORTS' })\n    .setTimestamp();\n\n  const selectMenu = new StringSelectMenuBuilder()\n    .setCustomId('ticket_select')\n    .setPlaceholder('Select the option that best fits your problem')\n    .addOptions(\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Billing Support')\n        .setDescription('Payment and billing issues')\n        .setValue('billing')\n        .setEmoji('💵'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Account Issues')\n        .setDescription('Problems with your account')\n        .setValue('account')\n        .setEmoji('📧'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('General Support')\n        .setDescription('General questions and support')\n        .setValue('general')\n        .setEmoji('🔧'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Report')\n        .setDescription('Report users or issues')\n        .setValue('report')\n        .setEmoji('⚠️')\n    );\n\n  const row = new ActionRowBuilder().addComponents(selectMenu);\n\n  await channel.send({ embeds: [embed], components: [row] });\n}\n\nasync function setupGameRolesPanel(channel) {\n  const embed = new EmbedBuilder()\n    .setColor('#FF6B6B')\n    .setTitle('🎮 Game Roles')\n    .setDescription(\n      'Select the games you play to get assigned roles!\\n\\n' +\n      '**Available Games:**\\n' +\n      '🔥 Valorant\\n' +\n      '🎯 Battleground Mobile India\\n' +\n      '💣 Counter Strike: Global Offensive\\n' +\n      '🎖️ Call of Duty: Modern Warfare\\n' +\n      '🏆 Apex Legends\\n' +\n      '🎭 Rainbow Six Siege\\n' +\n      '⚔️ League of Legends\\n\\n' +\n      'Choose your games from the menu below!'\n    )\n    .setFooter({ text: 'SG ESPORTS' })\n    .setTimestamp();\n\n  const selectMenu = new StringSelectMenuBuilder()\n    .setCustomId('game_select')\n    .setPlaceholder('Select your games')\n    .setMinValues(1)\n    .setMaxValues(7)\n    .addOptions(\n      new StringSelectMenuOptionBuilder()\n        .setLabel('VALORANT')\n        .setValue('valorant')\n        .setEmoji('🔥'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Battleground Mobile India')\n        .setValue('bgmi')\n        .setEmoji('🎯'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Counter Strike - Global Offensive')\n        .setValue('csgo')\n        .setEmoji('💣'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Call Of Duty: Modern Warfare')\n        .setValue('cod')\n        .setEmoji('🎖️'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Apex Legends')\n        .setValue('apex')\n        .setEmoji('🏆'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('Rainbow Six Siege')\n        .setValue('r6')\n        .setEmoji('🎭'),\n      new StringSelectMenuOptionBuilder()\n        .setLabel('League Of Legends')\n        .setValue('lol')\n        .setEmoji('⚔️')\n    );\n\n  const row = new ActionRowBuilder().addComponents(selectMenu);\n\n  await channel.send({ embeds: [embed], components: [row] });\n}\n\nasync function cleanOldBotMessages(channel, botId) {\n  try {\n    const messages = await channel.messages.fetch({ limit: 50 });\n    const botMessages = messages.filter(msg => msg.author.id === botId);\n    \n    for (const msg of botMessages.values()) {\n      await msg.delete().catch(err => console.log('Could not delete message:', err.message));\n    }\n  } catch (error) {\n    console.log('Error cleaning old messages:', error.message);\n  }\n}\n\nmodule.exports = {\n  setupTicketPanel,\n  setupGameRolesPanel,\n  cleanOldBotMessages\n};\n","size_bytes":4258},"SETUP_GUIDE.md":{"content":"# Quick Setup Guide for SG ESPORTS Discord Bot\n\n## Step 1: Create Your Discord Bot\n\n1. Visit https://discord.com/developers/applications\n2. Click **\"New Application\"** and name it (e.g., \"SG ESPORTS Bot\")\n3. Go to **\"Bot\"** tab → Click **\"Add Bot\"**\n4. Scroll down to **\"Privileged Gateway Intents\"** and enable:\n   - ✅ Presence Intent\n   - ✅ Server Members Intent\n   - ✅ Message Content Intent\n5. Click **\"Reset Token\"** and copy your bot token (save it somewhere safe!)\n\n## Step 2: Get Your Bot's Client ID\n\n1. Still in Developer Portal, go to **\"OAuth2\"** tab\n2. Copy your **\"Client ID\"** (save this too!)\n\n## Step 3: Invite Bot to Your Server\n\n1. Go to **\"OAuth2\"** → **\"URL Generator\"**\n2. Select Scopes:\n   - ✅ `bot`\n   - ✅ `applications.commands`\n3. Select Bot Permissions:\n   - ✅ Administrator (easiest)\n   - OR these specific permissions: Manage Channels, Manage Roles, Send Messages, Manage Messages, Read Message History, Add Reactions, View Channels\n4. Copy the generated URL at the bottom\n5. Paste it in your browser and invite the bot to your server\n\n## Step 4: Get Server and Channel IDs\n\n### Enable Developer Mode:\n1. Discord Settings → Advanced → Enable **Developer Mode**\n\n### Get the IDs you need:\n1. **Guild ID (Server ID)**: Right-click your server icon → Copy Server ID\n2. Create a category called \"Support Tickets\" → Right-click it → Copy Category ID\n3. Create a channel called \"logs\" → Right-click it → Copy Channel ID\n4. Create a role called \"Support Team\" → Server Settings → Roles → Right-click role → Copy Role ID\n5. Create a role called \"Admin\" (or use existing) → Copy Role ID\n\n## Step 5: Configure the Bot\n\n1. Copy `config.example.json` to `config.json`\n2. Fill in all the values you copied:\n\n```json\n{\n  \"token\": \"YOUR_BOT_TOKEN_FROM_STEP_1\",\n  \"clientId\": \"YOUR_CLIENT_ID_FROM_STEP_2\",\n  \"guildId\": \"YOUR_SERVER_ID\",\n  \"ticketCategoryId\": \"SUPPORT_TICKETS_CATEGORY_ID\",\n  \"logChannelId\": \"LOGS_CHANNEL_ID\",\n  \"supportRoleId\": \"SUPPORT_TEAM_ROLE_ID\",\n  \"adminRoleId\": \"ADMIN_ROLE_ID\",\n  \"ticketChannelId\": \"CHANNEL_WHERE_YOU_WANT_TICKET_PANEL\",\n  \"reactionRoleChannelId\": \"CHANNEL_WHERE_YOU_WANT_GAME_ROLES\"\n}\n```\n\n## Step 6: Deploy Commands\n\nRun this command to register slash commands:\n```bash\nnpm run deploy\n```\n\nYou should see: `✅ Successfully reloaded X application (/) commands.`\n\n## Step 7: Start the Bot\n\n```bash\nnpm start\n```\n\nYou should see: `✅ Bot is online as [Your Bot Name]`\n\n## Step 8: Set Up Your Panels\n\n### In Discord:\n\n1. Go to the channel where you want the ticket panel\n2. Type and send: `/setup-ticket`\n3. The bot will create a beautiful embed with dropdown menu\n\n4. Go to the channel where you want game roles\n5. Type and send: `/setup-gameroles`\n6. The bot will create the game selection panel\n\n## That's It! 🎉\n\nYour bot is now ready! Users can:\n- Select support categories from the dropdown to create tickets\n- Choose their game roles from the game panel\n- Support staff can claim and close tickets\n- You can view statistics with `/stats`\n\n## Troubleshooting\n\n**Bot not responding?**\n- Make sure the bot is online (green dot next to name)\n- Check if you enabled all 3 Privileged Intents\n- Verify the bot has proper permissions in your server\n\n**Commands not showing?**\n- Make sure you ran `npm run deploy`\n- Wait a few minutes for Discord to sync\n- Try kicking and re-inviting the bot\n\n**Can't create tickets?**\n- Verify the category ID in config.json is correct\n- Make sure the bot has \"Manage Channels\" permission\n- Check that the support role ID is correct\n\n## Need Help?\n\nCheck the full README.md for detailed documentation!\n","size_bytes":3633},"QUICK_START.md":{"content":"# 🚀 Quick Start - SG ESPORTS Discord Bot\n\n## What You Need\n\n1. **Discord Bot Token** - Get it from https://discord.com/developers/applications\n2. **Your Server (Guild) ID** - Right-click your server → Copy Server ID\n3. **Bot's Client ID** - From the Discord Developer Portal\n4. **Category ID** - Create a \"Support Tickets\" category in Discord → Copy ID\n5. **Role IDs** - For Support Team and Admin roles\n\n## 3-Step Setup\n\n### Step 1: Configure\n```bash\ncp config.example.json config.json\n```\nThen edit `config.json` with your Discord bot details.\n\n### Step 2: Deploy Commands\n```bash\nnpm run deploy\n```\n\n### Step 3: Start Bot\n```bash\nnpm start\n```\n\n## In Discord\n\nOnce your bot is online:\n\n1. `/setup-ticket` - Creates the support ticket panel\n2. `/setup-gameroles` - Creates the game role selection panel\n3. `/stats` - View support statistics\n\n## Features Included\n\n✅ Support ticket system with dropdown (Billing, Account, General, Report)  \n✅ Ticket claiming by support staff  \n✅ Automatic transcripts saved on ticket close  \n✅ User feedback collection (1-5 star ratings)  \n✅ Statistics tracking (total tickets, ratings, etc.)  \n✅ Game role selection (7 games: Valorant, BGMI, CS:GO, COD, Apex, R6, LoL)  \n✅ Auto role assignment when users select games  \n\n## Need Help?\n\n- **Full guide**: See `SETUP_GUIDE.md`\n- **Detailed docs**: See `README.md`\n","size_bytes":1369},"replit.md":{"content":"# SG ESPORTS Discord Bot - Project Documentation\n\n## Overview\nA feature-rich Discord bot built for SG ESPORTS with support ticket management, reaction roles, and game role assignment systems. Built with Discord.js v14.\n\n## Purpose\n- Provide professional support ticket system with dropdown menus\n- Enable automatic role assignment for game communities\n- Track support performance with ratings and statistics\n- Streamline community management for SG ESPORTS\n\n## Current State\n- ✅ Bot structure created with command handler\n- ✅ Event system implemented\n- ✅ Support ticket system with dropdown select menus\n- ✅ Ticket claiming and closing features\n- ✅ Automatic transcript generation\n- ✅ User feedback collection (1-5 star ratings)\n- ✅ Game role selection system with 7 games\n- ✅ Admin commands for panel setup\n- ✅ Statistics tracking\n\n## Recent Changes (October 29, 2025)\n- Created complete Discord bot infrastructure\n- Implemented support ticket system matching user's design requirements\n- Added game role selection with dropdown menu\n- Created admin commands for setup and management\n- Added data persistence for tickets and statistics\n- Enhanced statistics tracking: total tickets, closed tickets, tickets by type\n- Implemented user feedback collection with 1-5 star ratings\n- Fixed stats.json updates to track all ticket lifecycle events\n- Added HTML transcript generation sent to users via DM and transcript channel\n- Implemented AWS deployment guide for Amazon Linux and Ubuntu\n- **NEW: Auto-setup on startup** - Panels automatically post to designated channels\n- **NEW: Ticket restoration** - Open tickets reconnect when bot restarts\n- **NEW: Smart cleanup** - Old bot messages removed before posting new panels\n\n## Project Architecture\n\n### Structure\n```\n├── commands/\n│   ├── admin/         - Administrative commands\n│   └── ticket/        - Ticket management commands\n├── events/            - Discord event handlers\n├── data/             - JSON data storage\n│   ├── tickets.json  - Active ticket tracking\n│   ├── stats.json    - Support statistics\n│   └── transcripts/  - Saved ticket transcripts\n├── index.js          - Main bot entry point\n├── deploy-commands.js - Slash command registration\n└── config.json       - Bot configuration (not in repo)\n```\n\n### Key Features\n1. **Support Tickets**: Dropdown menu with 4 categories (Billing, Account, General, Report)\n2. **Game Roles**: Multi-select dropdown for 7 games (Valorant, BGMI, CS:GO, COD, Apex, R6, LoL)\n3. **Ticket Management**: Claim, close, transcripts, feedback\n4. **Statistics**: Rating tracking and performance metrics\n\n## Dependencies\n- discord.js ^14.24.1\n- Node.js 20\n\n## Configuration Required\nUser needs to provide:\n- Discord bot token\n- Client ID and Guild ID\n- Channel/Category IDs for tickets\n- Role IDs for support staff\n\n## Setup Notes\n- Bot requires privileged intents (Server Members, Message Content)\n- Slash commands must be deployed with deploy-commands.js\n- Data directory auto-created on first run\n","size_bytes":3081},"commands/admin/setup-gameroles.js":{"content":"const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, PermissionFlagsBits } = require('discord.js');\n\nmodule.exports = {\n  data: new SlashCommandBuilder()\n    .setName('setup-gameroles')\n    .setDescription('Set up the game role selection panel')\n    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator),\n  async execute(interaction, client) {\n    const embed = new EmbedBuilder()\n      .setColor('#FF6B6B')\n      .setTitle('🎮 Game Roles')\n      .setDescription(\n        'Select the games you play to get assigned roles!\\n\\n' +\n        '**Available Games:**\\n' +\n        '🔥 Valorant\\n' +\n        '🎯 Battleground Mobile India\\n' +\n        '💣 Counter Strike: Global Offensive\\n' +\n        '🎖️ Call of Duty: Modern Warfare\\n' +\n        '🏆 Apex Legends\\n' +\n        '🎭 Rainbow Six Siege\\n' +\n        '⚔️ League of Legends\\n\\n' +\n        'Choose your games from the menu below!'\n      )\n      .setFooter({ text: 'SG ESPORTS' })\n      .setTimestamp();\n\n    const selectMenu = new StringSelectMenuBuilder()\n      .setCustomId('game_select')\n      .setPlaceholder('Select your games')\n      .setMinValues(1)\n      .setMaxValues(7)\n      .addOptions(\n        new StringSelectMenuOptionBuilder()\n          .setLabel('VALORANT')\n          .setValue('valorant')\n          .setEmoji('🔥'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Battleground Mobile India')\n          .setValue('bgmi')\n          .setEmoji('🎯'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Counter Strike - Global Offensive')\n          .setValue('csgo')\n          .setEmoji('💣'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Call Of Duty: Modern Warfare')\n          .setValue('cod')\n          .setEmoji('🎖️'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Apex Legends')\n          .setValue('apex')\n          .setEmoji('🏆'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('Rainbow Six Siege')\n          .setValue('r6')\n          .setEmoji('🎭'),\n        new StringSelectMenuOptionBuilder()\n          .setLabel('League Of Legends')\n          .setValue('lol')\n          .setEmoji('⚔️')\n      );\n\n    const row = new ActionRowBuilder().addComponents(selectMenu);\n\n    await interaction.reply({ content: '✅ Game role panel created!', ephemeral: true });\n    await interaction.channel.send({ embeds: [embed], components: [row] });\n  },\n};\n","size_bytes":2514},"check-setup.js":{"content":"const fs = require('fs');\n\nconsole.log('═══════════════════════════════════════════════════════════');\nconsole.log('  🎮 SG ESPORTS Discord Bot - Setup Status Check');\nconsole.log('═══════════════════════════════════════════════════════════\\n');\n\nlet hasConfig = false;\nlet configComplete = false;\n\nif (fs.existsSync('./config.json')) {\n  console.log('✅ config.json found!');\n  hasConfig = true;\n  \n  try {\n    const config = JSON.parse(fs.readFileSync('./config.json', 'utf8'));\n    const requiredFields = ['token', 'clientId', 'guildId'];\n    const allFieldsPresent = requiredFields.every(field => \n      config[field] && config[field] !== 'YOUR_BOT_TOKEN_HERE' && config[field] !== 'YOUR_CLIENT_ID_HERE' && config[field] !== 'YOUR_GUILD_ID_HERE'\n    );\n    \n    if (allFieldsPresent) {\n      console.log('✅ Essential configuration fields are filled!');\n      configComplete = true;\n    } else {\n      console.log('⚠️  config.json exists but needs to be configured');\n      console.log('   Please update the following fields:');\n      requiredFields.forEach(field => {\n        if (!config[field] || config[field].includes('YOUR_')) {\n          console.log(`   - ${field}`);\n        }\n      });\n    }\n  } catch (error) {\n    console.log('❌ config.json has invalid JSON format');\n  }\n} else if (process.env.DISCORD_TOKEN) {\n  console.log('✅ Using environment variables for configuration');\n  hasConfig = true;\n  configComplete = true;\n} else {\n  console.log('❌ config.json not found!');\n}\n\nconsole.log('\\n═══════════════════════════════════════════════════════════');\n\nif (!hasConfig || !configComplete) {\n  console.log('\\n📋 SETUP REQUIRED:\\n');\n  console.log('1. Copy config.example.json to config.json:');\n  console.log('   cp config.example.json config.json\\n');\n  console.log('2. Edit config.json with your Discord bot details\\n');\n  console.log('3. Deploy commands:');\n  console.log('   npm run deploy\\n');\n  console.log('4. Start the bot:');\n  console.log('   npm start\\n');\n  console.log('📖 For detailed setup instructions, see SETUP_GUIDE.md\\n');\n  console.log('═══════════════════════════════════════════════════════════');\n  process.exit(0);\n}\n\nconsole.log('\\n✨ Configuration looks good!');\nconsole.log('\\n📋 NEXT STEPS:\\n');\nconsole.log('1. Deploy slash commands (if you haven\\'t already):');\nconsole.log('   npm run deploy\\n');\nconsole.log('2. Start the bot:');\nconsole.log('   npm start\\n');\nconsole.log('3. In Discord, use these commands:');\nconsole.log('   /setup-ticket     - Create support ticket panel');\nconsole.log('   /setup-gameroles  - Create game role panel');\nconsole.log('   /stats            - View support statistics\\n');\nconsole.log('═══════════════════════════════════════════════════════════');\n","size_bytes":3342},"events/interactionCreate.js":{"content":"const { PermissionFlagsBits, ChannelType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, AttachmentBuilder } = require('discord.js');\nconst fs = require('fs');\nconst { generateHTMLTranscript } = require('../utils/transcriptGenerator');\n\nmodule.exports = {\n  name: 'interactionCreate',\n  async execute(interaction, client) {\n    if (interaction.isChatInputCommand()) {\n      const command = client.commands.get(interaction.commandName);\n      if (!command) return;\n\n      try {\n        await command.execute(interaction, client);\n      } catch (error) {\n        console.error(error);\n        const errorMessage = { content: '❌ There was an error executing this command!', ephemeral: true };\n        if (interaction.replied || interaction.deferred) {\n          await interaction.followUp(errorMessage);\n        } else {\n          await interaction.reply(errorMessage);\n        }\n      }\n    }\n\n    if (interaction.isStringSelectMenu()) {\n      if (interaction.customId === 'ticket_select') {\n        await handleTicketCreation(interaction, client);\n      } else if (interaction.customId === 'game_select') {\n        await handleGameRoleSelection(interaction, client);\n      }\n    }\n\n    if (interaction.isButton()) {\n      if (interaction.customId === 'claim_ticket') {\n        await handleTicketClaim(interaction, client);\n      } else if (interaction.customId === 'close_ticket') {\n        await handleTicketClose(interaction, client);\n      }\n    }\n  },\n};\n\nasync function handleTicketCreation(interaction, client) {\n  const ticketType = interaction.values[0];\n  const userId = interaction.user.id;\n  const guild = interaction.guild;\n\n  const existingTicket = Array.from(guild.channels.cache.values()).find(\n    ch => ch.name === `ticket-${interaction.user.username.toLowerCase()}` && ch.type === ChannelType.GuildText\n  );\n\n  if (existingTicket) {\n    return interaction.reply({ \n      content: `❌ You already have an open ticket: <#${existingTicket.id}>`, \n      ephemeral: true \n    });\n  }\n\n  await interaction.deferReply({ ephemeral: true });\n\n  const categoryId = client.config.ticketCategoryId;\n  const ticketIcons = {\n    'billing': '💵',\n    'account': '📧',\n    'general': '🔧',\n    'report': '⚠️'\n  };\n\n  const ticketDescriptions = {\n    'billing': 'Payment and billing issues',\n    'account': 'Problems with your account',\n    'general': 'General questions and support',\n    'report': 'Report users or issues'\n  };\n\n  try {\n    const ticketChannel = await guild.channels.create({\n      name: `ticket-${interaction.user.username}`,\n      type: ChannelType.GuildText,\n      parent: categoryId,\n      permissionOverwrites: [\n        {\n          id: guild.id,\n          deny: [PermissionFlagsBits.ViewChannel],\n        },\n        {\n          id: userId,\n          allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory],\n        },\n        {\n          id: client.config.supportRoleId,\n          allow: [PermissionFlagsBits.ViewChannel, PermissionFlagsBits.SendMessages, PermissionFlagsBits.ReadMessageHistory],\n        },\n      ],\n    });\n\n    const embed = new EmbedBuilder()\n      .setColor('#5865F2')\n      .setTitle(`${ticketIcons[ticketType]} ${ticketDescriptions[ticketType]}`)\n      .setDescription(`Hello <@${userId}>,\\n\\nThank you for opening a support ticket!\\n\\n**Category:** ${ticketDescriptions[ticketType]}\\n\\nOur support team will be with you shortly. Please describe your issue in detail.`)\n      .setFooter({ text: 'SG ESPORTS Support System' })\n      .setTimestamp();\n\n    const row = new ActionRowBuilder()\n      .addComponents(\n        new ButtonBuilder()\n          .setCustomId('claim_ticket')\n          .setLabel('Claim Ticket')\n          .setStyle(ButtonStyle.Primary)\n          .setEmoji('✋'),\n        new ButtonBuilder()\n          .setCustomId('close_ticket')\n          .setLabel('Close Ticket')\n          .setStyle(ButtonStyle.Danger)\n          .setEmoji('🔒')\n      );\n\n    await ticketChannel.send({ content: `<@${userId}>`, embeds: [embed], components: [row] });\n\n    const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n    ticketData[ticketChannel.id] = {\n      userId: userId,\n      type: ticketType,\n      createdAt: Date.now(),\n      claimed: false,\n      messages: []\n    };\n    fs.writeFileSync('./data/tickets.json', JSON.stringify(ticketData, null, 2));\n\n    const stats = JSON.parse(fs.readFileSync('./data/stats.json', 'utf8'));\n    stats.totalTickets = (stats.totalTickets || 0) + 1;\n    if (!stats.ticketsByType) stats.ticketsByType = {};\n    stats.ticketsByType[ticketType] = (stats.ticketsByType[ticketType] || 0) + 1;\n    fs.writeFileSync('./data/stats.json', JSON.stringify(stats, null, 2));\n\n    await interaction.editReply({ content: `✅ Ticket created: <#${ticketChannel.id}>` });\n\n    if (client.config.logChannelId) {\n      const logChannel = guild.channels.cache.get(client.config.logChannelId);\n      if (logChannel) {\n        const logEmbed = new EmbedBuilder()\n          .setColor('#00FF00')\n          .setTitle('📂 New Ticket Created')\n          .addFields(\n            { name: 'User', value: `<@${userId}>`, inline: true },\n            { name: 'Type', value: ticketDescriptions[ticketType], inline: true },\n            { name: 'Channel', value: `<#${ticketChannel.id}>`, inline: true }\n          )\n          .setTimestamp();\n        await logChannel.send({ embeds: [logEmbed] });\n      }\n    }\n  } catch (error) {\n    console.error('Error creating ticket:', error);\n    await interaction.editReply({ content: '❌ Failed to create ticket. Please contact an administrator.' });\n  }\n}\n\nasync function handleGameRoleSelection(interaction, client) {\n  const selectedGames = interaction.values;\n  const member = interaction.member;\n\n  const gameRoles = {\n    'valorant': 'Valorant',\n    'bgmi': 'BGMI',\n    'csgo': 'CS:GO',\n    'cod': 'Call of Duty',\n    'apex': 'Apex Legends',\n    'r6': 'Rainbow Six Siege',\n    'lol': 'League of Legends'\n  };\n\n  await interaction.deferReply({ ephemeral: true });\n\n  try {\n    const guild = interaction.guild;\n    const rolesToAdd = [];\n\n    for (const game of selectedGames) {\n      const roleName = gameRoles[game];\n      let role = guild.roles.cache.find(r => r.name === roleName);\n\n      if (!role) {\n        role = await guild.roles.create({\n          name: roleName,\n          color: 'Random',\n          reason: 'Game role for reaction roles'\n        });\n      }\n\n      rolesToAdd.push(role);\n    }\n\n    const currentGameRoles = member.roles.cache.filter(r => Object.values(gameRoles).includes(r.name));\n    await member.roles.remove(currentGameRoles);\n\n    await member.roles.add(rolesToAdd);\n\n    const addedRoles = rolesToAdd.map(r => r.name).join(', ');\n    await interaction.editReply({ content: `✅ Your game roles have been updated!\\n\\n**Roles:** ${addedRoles}` });\n  } catch (error) {\n    console.error('Error assigning game roles:', error);\n    await interaction.editReply({ content: '❌ Failed to assign roles. Please contact an administrator.' });\n  }\n}\n\nasync function handleTicketClaim(interaction, client) {\n  const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n  const channelId = interaction.channel.id;\n\n  if (!ticketData[channelId]) {\n    return interaction.reply({ content: '❌ This is not a ticket channel!', ephemeral: true });\n  }\n\n  if (ticketData[channelId].claimed) {\n    return interaction.reply({ content: '❌ This ticket has already been claimed!', ephemeral: true });\n  }\n\n  ticketData[channelId].claimed = true;\n  ticketData[channelId].claimedBy = interaction.user.id;\n  fs.writeFileSync('./data/tickets.json', JSON.stringify(ticketData, null, 2));\n\n  const embed = new EmbedBuilder()\n    .setColor('#FFA500')\n    .setTitle('✋ Ticket Claimed')\n    .setDescription(`This ticket has been claimed by <@${interaction.user.id}>`)\n    .setTimestamp();\n\n  await interaction.reply({ embeds: [embed] });\n}\n\nasync function handleTicketClose(interaction, client) {\n  const ticketData = JSON.parse(fs.readFileSync('./data/tickets.json', 'utf8'));\n  const channelId = interaction.channel.id;\n\n  if (!ticketData[channelId]) {\n    return interaction.reply({ content: '❌ This is not a ticket channel!', ephemeral: true });\n  }\n\n  await interaction.deferReply();\n\n  const messages = await interaction.channel.messages.fetch({ limit: 100 });\n  const messagesArray = Array.from(messages.values()).reverse();\n  \n  const textTranscript = messagesArray.map(m => {\n    return `[${new Date(m.createdTimestamp).toLocaleString()}] ${m.author.tag}: ${m.content}`;\n  }).join('\\n');\n\n  const htmlTranscript = generateHTMLTranscript(messagesArray, ticketData[channelId]);\n\n  const timestamp = Date.now();\n  const textFile = `./data/transcripts/ticket-${channelId}-${timestamp}.txt`;\n  const htmlFile = `./data/transcripts/ticket-${channelId}-${timestamp}.html`;\n  \n  fs.writeFileSync(textFile, textTranscript);\n  fs.writeFileSync(htmlFile, htmlTranscript);\n\n  const embed = new EmbedBuilder()\n    .setColor('#FFD700')\n    .setTitle('⭐ Rate Your Support Experience')\n    .setDescription('Please rate your support experience from 1-5 stars:\\n\\n⭐ = 1 star\\n⭐⭐ = 2 stars\\n⭐⭐⭐ = 3 stars\\n⭐⭐⭐⭐ = 4 stars\\n⭐⭐⭐⭐⭐ = 5 stars\\n\\nReact with the number of stars!')\n    .setFooter({ text: 'This channel will close in 30 seconds' });\n\n  const ratingMsg = await interaction.editReply({ embeds: [embed] });\n\n  await ratingMsg.react('1️⃣');\n  await ratingMsg.react('2️⃣');\n  await ratingMsg.react('3️⃣');\n  await ratingMsg.react('4️⃣');\n  await ratingMsg.react('5️⃣');\n\n  const filter = (reaction, user) => {\n    return ['1️⃣', '2️⃣', '3️⃣', '4️⃣', '5️⃣'].includes(reaction.emoji.name) && user.id === ticketData[channelId].userId;\n  };\n\n  const collected = await ratingMsg.awaitReactions({ filter, max: 1, time: 30000 }).catch(() => null);\n\n  const stats = JSON.parse(fs.readFileSync('./data/stats.json', 'utf8'));\n  stats.totalClosed = (stats.totalClosed || 0) + 1;\n\n  if (collected && collected.size > 0) {\n    const reaction = collected.first();\n    const ratingMap = { '1️⃣': 1, '2️⃣': 2, '3️⃣': 3, '4️⃣': 4, '5️⃣': 5 };\n    const rating = ratingMap[reaction.emoji.name];\n\n    if (!stats.ratings) stats.ratings = [];\n    stats.ratings.push({ \n      rating, \n      ticketId: channelId, \n      ticketType: ticketData[channelId].type,\n      timestamp: Date.now() \n    });\n  }\n  \n  fs.writeFileSync('./data/stats.json', JSON.stringify(stats, null, 2));\n\n  const htmlAttachment = new AttachmentBuilder(Buffer.from(htmlTranscript, 'utf-8'), { \n    name: `ticket-transcript-${timestamp}.html` \n  });\n\n  const transcriptEmbed = new EmbedBuilder()\n    .setColor('#5865F2')\n    .setTitle('📋 Ticket Transcript')\n    .setDescription('Your support ticket has been closed. Please find the conversation transcript attached.')\n    .addFields(\n      { name: 'Ticket Type', value: ticketData[channelId].type, inline: true },\n      { name: 'Closed At', value: new Date().toLocaleString(), inline: true }\n    )\n    .setFooter({ text: 'SG ESPORTS Support System' })\n    .setTimestamp();\n\n  try {\n    const user = await client.users.fetch(ticketData[channelId].userId);\n    await user.send({ \n      embeds: [transcriptEmbed], \n      files: [htmlAttachment] \n    }).catch(err => {\n      console.log(`Could not send transcript to user ${ticketData[channelId].userId}:`, err.message);\n    });\n  } catch (error) {\n    console.log('Error sending DM to user:', error.message);\n  }\n\n  if (client.config.transcriptChannelId) {\n    const transcriptChannel = interaction.guild.channels.cache.get(client.config.transcriptChannelId);\n    if (transcriptChannel) {\n      const serverTranscriptEmbed = new EmbedBuilder()\n        .setColor('#FF0000')\n        .setTitle('🔒 Ticket Closed - Transcript')\n        .addFields(\n          { name: 'Ticket', value: interaction.channel.name, inline: true },\n          { name: 'User', value: `<@${ticketData[channelId].userId}>`, inline: true },\n          { name: 'Closed by', value: `<@${interaction.user.id}>`, inline: true },\n          { name: 'Type', value: ticketData[channelId].type, inline: true },\n          { name: 'Created', value: new Date(ticketData[channelId].createdAt).toLocaleString(), inline: true },\n          { name: 'Closed', value: new Date().toLocaleString(), inline: true }\n        )\n        .setTimestamp();\n\n      const htmlAttachment2 = new AttachmentBuilder(Buffer.from(htmlTranscript, 'utf-8'), { \n        name: `ticket-transcript-${timestamp}.html` \n      });\n\n      await transcriptChannel.send({ \n        embeds: [serverTranscriptEmbed], \n        files: [htmlAttachment2] \n      }).catch(err => {\n        console.log('Could not send transcript to transcript channel:', err.message);\n      });\n    }\n  }\n\n  if (client.config.logChannelId) {\n    const logChannel = interaction.guild.channels.cache.get(client.config.logChannelId);\n    if (logChannel) {\n      const logEmbed = new EmbedBuilder()\n        .setColor('#FF0000')\n        .setTitle('🔒 Ticket Closed')\n        .addFields(\n          { name: 'Ticket', value: interaction.channel.name, inline: true },\n          { name: 'Closed by', value: `<@${interaction.user.id}>`, inline: true },\n          { name: 'Transcript', value: `Saved locally and sent to user & transcript channel` }\n        )\n        .setTimestamp();\n      await logChannel.send({ embeds: [logEmbed] });\n    }\n  }\n\n  delete ticketData[channelId];\n  fs.writeFileSync('./data/tickets.json', JSON.stringify(ticketData, null, 2));\n\n  setTimeout(async () => {\n    await interaction.channel.delete();\n  }, 5000);\n}\n","size_bytes":13703},"start-bot.sh":{"content":"#!/bin/bash\n\nif [ ! -f \"config.json\" ]; then\n    echo \"❌ Error: config.json not found!\"\n    echo \"\"\n    echo \"📋 Please follow these steps:\"\n    echo \"1. Copy config.example.json to config.json\"\n    echo \"2. Fill in your bot token and other details\"\n    echo \"3. Run 'npm run deploy' to register commands\"\n    echo \"4. Run 'npm start' to start the bot\"\n    echo \"\"\n    echo \"📖 See SETUP_GUIDE.md for detailed instructions!\"\n    exit 1\nfi\n\necho \"🚀 Starting SG ESPORTS Discord Bot...\"\nnode index.js\n","size_bytes":507},"utils/transcriptGenerator.js":{"content":"function generateHTMLTranscript(messages, ticketInfo) {\n  const { userId, type, createdAt, claimedBy } = ticketInfo;\n  \n  const ticketTypes = {\n    'billing': '💵 Billing Support',\n    'account': '📧 Account Issues',\n    'general': '🔧 General Support',\n    'report': '⚠️ Report'\n  };\n\n  const html = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Ticket Transcript - SG ESPORTS</title>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            padding: 20px;\n            color: #333;\n        }\n        .container {\n            max-width: 900px;\n            margin: 0 auto;\n            background: white;\n            border-radius: 12px;\n            box-shadow: 0 10px 40px rgba(0,0,0,0.2);\n            overflow: hidden;\n        }\n        .header {\n            background: linear-gradient(135deg, #5865F2 0%, #7289DA 100%);\n            color: white;\n            padding: 30px;\n            text-align: center;\n        }\n        .header h1 {\n            font-size: 28px;\n            margin-bottom: 10px;\n        }\n        .header p {\n            opacity: 0.9;\n            font-size: 14px;\n        }\n        .ticket-info {\n            background: #f7f9fc;\n            padding: 20px 30px;\n            border-bottom: 2px solid #e3e7ed;\n        }\n        .ticket-info-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n            gap: 15px;\n            margin-top: 15px;\n        }\n        .info-item {\n            background: white;\n            padding: 12px;\n            border-radius: 8px;\n            border-left: 3px solid #5865F2;\n        }\n        .info-label {\n            font-size: 12px;\n            color: #72767d;\n            text-transform: uppercase;\n            font-weight: 600;\n            margin-bottom: 5px;\n        }\n        .info-value {\n            font-size: 14px;\n            color: #2c2f33;\n            font-weight: 500;\n        }\n        .messages {\n            padding: 30px;\n        }\n        .message {\n            margin-bottom: 20px;\n            padding: 15px;\n            background: #f7f9fc;\n            border-radius: 8px;\n            border-left: 3px solid #5865F2;\n        }\n        .message-header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            margin-bottom: 10px;\n        }\n        .message-author {\n            font-weight: 600;\n            color: #5865F2;\n            font-size: 15px;\n        }\n        .message-timestamp {\n            font-size: 12px;\n            color: #72767d;\n        }\n        .message-content {\n            color: #2c2f33;\n            line-height: 1.6;\n            font-size: 14px;\n            word-wrap: break-word;\n        }\n        .message.bot {\n            background: #fff3cd;\n            border-left-color: #ffc107;\n        }\n        .message.bot .message-author {\n            color: #ffc107;\n        }\n        .footer {\n            background: #f7f9fc;\n            padding: 20px 30px;\n            text-align: center;\n            border-top: 2px solid #e3e7ed;\n        }\n        .footer p {\n            color: #72767d;\n            font-size: 13px;\n        }\n        .sg-logo {\n            font-size: 20px;\n            font-weight: bold;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            -webkit-background-clip: text;\n            -webkit-text-fill-color: transparent;\n            background-clip: text;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🎮 SG ESPORTS Support Ticket</h1>\n            <p>Ticket Transcript</p>\n        </div>\n        \n        <div class=\"ticket-info\">\n            <h2 style=\"margin-bottom: 10px; color: #2c2f33;\">Ticket Information</h2>\n            <div class=\"ticket-info-grid\">\n                <div class=\"info-item\">\n                    <div class=\"info-label\">Category</div>\n                    <div class=\"info-value\">${ticketTypes[type] || type}</div>\n                </div>\n                <div class=\"info-item\">\n                    <div class=\"info-label\">Created</div>\n                    <div class=\"info-value\">${new Date(createdAt).toLocaleString()}</div>\n                </div>\n                <div class=\"info-item\">\n                    <div class=\"info-label\">User ID</div>\n                    <div class=\"info-value\">${userId}</div>\n                </div>\n                ${claimedBy ? `\n                <div class=\"info-item\">\n                    <div class=\"info-label\">Claimed By</div>\n                    <div class=\"info-value\">${claimedBy}</div>\n                </div>\n                ` : ''}\n            </div>\n        </div>\n        \n        <div class=\"messages\">\n            <h2 style=\"margin-bottom: 20px; color: #2c2f33;\">Conversation</h2>\n            ${messages.map(msg => `\n            <div class=\"message ${msg.author.bot ? 'bot' : ''}\">\n                <div class=\"message-header\">\n                    <span class=\"message-author\">${escapeHtml(msg.author.tag)}</span>\n                    <span class=\"message-timestamp\">${new Date(msg.createdTimestamp).toLocaleString()}</span>\n                </div>\n                <div class=\"message-content\">${escapeHtml(msg.content) || '<i>No text content</i>'}</div>\n            </div>\n            `).join('')}\n        </div>\n        \n        <div class=\"footer\">\n            <p class=\"sg-logo\">SG ESPORTS</p>\n            <p style=\"margin-top: 10px;\">Thank you for contacting our support team!</p>\n        </div>\n    </div>\n</body>\n</html>\n  `.trim();\n\n  return html;\n}\n\nfunction escapeHtml(text) {\n  const map = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#039;'\n  };\n  return text.replace(/[&<>\"']/g, m => map[m]);\n}\n\nmodule.exports = { generateHTMLTranscript };\n","size_bytes":6153}},"version":2}